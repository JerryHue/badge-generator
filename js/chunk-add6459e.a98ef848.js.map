{"version":3,"sources":["webpack:///./src/components/Code.vue","webpack:///./src/components/Code.vue?f6c3","webpack:///./src/components/Code.vue?e26e","webpack:///./src/components/TextInput.vue?6f20","webpack:///./src/components/TextInput.vue","webpack:///./src/components/TextInput.vue?b4e0","webpack:///./src/components/TextInput.vue?b18f","webpack:///./src/components/Checkbox.vue","webpack:///./src/components/Checkbox.vue?cf46","webpack:///./src/components/Checkbox.vue?2568","webpack:///./src/views/RepoBadges.vue","webpack:///./src/core/ghActions.ts","webpack:///./src/views/RepoBadges.vue?4ab5","webpack:///./src/views/RepoBadges.vue?60b2","webpack:///./src/components/Results.vue","webpack:///./src/components/Results.vue?649b","webpack:///./src/components/Results.vue?6f49","webpack:///./src/lib.ts","webpack:///./src/components/Help.vue","webpack:///./src/components/Help.vue?d82e","webpack:///./src/components/Help.vue?e1b3"],"names":["code","name","props","type","String","required","render","class","for","slug","label","id","value","modelValue","placeholder","isRequired","disabled","$emit","$event","target","content","note","components","Markdown","Boolean","computed","this","__scopeId","checked","submit","username","repoName","licenseType","versionType","useThisTemplate","ghPages","addIssues","workflowName","result","message","_statusBadgeUrl","ghURL","encodedName","encodeURIComponent","_statusTargetUrl","replace","_statusData","altText","imageTarget","linkTarget","statusBadge","repo","fields","Checkbox","Help","Results","TextInput","methods","console","debug","Repo","ghActionsBadge","versionBadge","tagBadge","licenseBadge","repoBadge","gh","starsBadge","ghCounter","forksBadge","issuesBadge","templateButton","useThisTemplateBadge","ghPagesButton","ghPagesBadge","licenseMessage","Code","stripLeadingSlash","slugify","values","join","toLowerCase"],"mappings":"kLACE,eAAkC,YAA7B,eAAuB,2BAAd,EAAAA,MAAI,KCEL,qBAAgB,CAC7BC,KAAM,OACNC,MAAO,CACLF,KAAM,CAAEG,KAAMC,OAAQC,UAAU,MCHpC,EAAOC,OAASA,EAED,U,kCCLf,W,+ICGyCC,MAAM,Y,SAapCA,MAAM,Q,sGAff,eAkBM,YAjBJ,eAEQ,SAFAC,IAAK,EAAAC,MAAI,C,8BACZ,EAAAC,OAAK,GAAe,EAAU,Y,iBAAtB,eAAiD,OAAjD,EAAyC,M,kCAGtD,eAQE,SAPCC,GAAI,EAAAF,KACLN,KAAK,OACJS,MAAO,EAAAC,WACPC,YAAa,EAAAA,YACbT,SAAU,EAAAU,WACVC,SAAU,EAAAA,SACN,QAAK,eAAE,EAAAC,MAAM,oBAAqBC,EAAOC,OAAOP,S,4DAG7B,EAAI,M,iBAA9B,eAEQ,QAFR,EAEQ,CADN,eAAqC,GAA1BQ,QAAS,EAAAC,MAAI,uB,sDCXf,iBAAgB,CAC7BpB,KAAM,YACNqB,WAAY,CACVC,WAAA,MAEFrB,MAAO,CACLQ,MAAO,CAAEP,KAAMC,OAAQC,UAAU,GACjCQ,WAAY,CAAEV,KAAMC,OAAQC,UAAU,GACtCS,YAAa,CAAEX,KAAMC,OAAQC,UAAU,GACvCU,WAAY,CAAEZ,KAAMqB,QAASnB,UAAU,GACvCW,SAAU,CAAEb,KAAMqB,QAASnB,UAAU,GACrCgB,KAAM,CAAElB,KAAMC,OAAQC,UAAU,IAElCoB,SAAU,CACR,OACE,OAAO,eAAQ,OAAQC,KAAKhB,MAAOgB,KAAKb,gB,UChB9C,EAAOP,OAASA,EAChB,EAAOqB,UAAY,kBAEJ,U,iECKJpB,MAAM,Q,mFAZf,eAeM,YAdJ,eAEQ,SAFAC,IAAK,EAAAC,MAAI,eACZ,EAAAC,OAAK,WAGV,eAKE,SAJCC,GAAI,EAAAF,KACLN,KAAK,WACJyB,QAAS,EAAAf,WACL,SAAM,eAAE,EAAAI,MAAM,oBAAqBC,EAAOC,OAAOS,W,0BAG9B,EAAI,M,iBAA9B,eAEQ,QAFR,EAEQ,CADN,eAAqC,GAA1BR,QAAS,EAAAC,MAAI,uB,oDCRf,iBAAgB,CAC7BpB,KAAM,WACNqB,WAAY,CACVC,WAAA,MAEFrB,MAAO,CACLQ,MAAO,CAAEP,KAAMC,OAAQC,UAAU,GACjCQ,WAAY,CAAEV,KAAMqB,QAASnB,UAAU,GACvCgB,KAAM,CAAElB,KAAMC,OAAQC,UAAU,IAElCoB,SAAU,CACR,OACE,OAAO,eAAQ,MAAOC,KAAKhB,WCfjC,EAAOJ,OAASA,EAED,U,oECJRC,MAAM,uB,EACT,eAQM,OARDA,MAAM,OAAK,CACd,eAMM,OANDA,MAAM,UAAQ,CACjB,eAAoB,UAAhB,eAEJ,eAEI,SAFD,+E,MAMFA,MAAM,O,GACJA,MAAM,S,GACJA,MAAM,a,EACT,eAAqB,UAAjB,gBAAY,G,GAGJN,KAAK,W,EACb,eAA4B,cAApB,eAAW,G,EAGnB,eAAM,mB,EAGN,eAAM,mB,EAGN,eAAM,mB,EAGJ,eAA2B,aAApB,gBAAY,G,EAOnB,eAA4B,SAArBO,IAAI,OAAM,OAAG,G,EAOpB,eAAgC,SAAzBA,IAAI,OAAM,WAAO,G,EAG5B,eAAM,mB,GAEIP,KAAK,mB,EACb,eAAgC,cAAxB,mBAAe,G,EAoBzB,eAAM,mB,GAEIA,KAAK,c,EACb,eAAwC,cAAhC,2BAAuB,G,EASjC,eAAM,mB,EAEN,eAAkD,SAA3CM,MAAM,MAAMJ,KAAK,SAASS,MAAM,U,YAKxCL,MAAM,S,GAKRA,MAAM,O,GACJA,MAAM,U,sKA/Ff,eAmGM,MAnGN,EAmGM,CAlGJ,EAUA,eAiFM,MAjFN,EAiFM,CAhFJ,eA2EM,MA3EN,EA2EM,CA1EJ,eAyEM,MAzEN,EAyEM,CAxEJ,EAEA,eAqEO,QArEA,SAAM,qCAAgB,EAAAsB,QAAA,EAAAA,UAAA,GAAM,e,CACjC,eA6BW,WA7BX,EA6BW,CA5BT,EAEA,eAA4D,GAAjDnB,MAAM,W,WAAoB,EAAAoB,S,qCAAA,EAAAA,SAAQ,GAAEf,WAAA,I,uBAC/C,EAEA,eAA6D,GAAlDL,MAAM,Y,WAAqB,EAAAqB,S,qCAAA,EAAAA,SAAQ,GAAEhB,WAAA,I,uBAChD,EAEA,eAAmD,GAAxCL,MAAM,U,WAAmB,EAAAsB,Y,qCAAA,EAAAA,YAAW,I,uBAC/C,EAEA,eAgBM,YAfJ,E,eACA,eAKE,SAJA7B,KAAK,QACLQ,GAAG,MACHC,MAAM,M,qCACG,EAAAqB,YAAW,I,mBAAX,EAAAA,eAEX,E,eACA,eAKE,SAJA9B,KAAK,QACLQ,GAAG,MACHC,MAAM,U,qCACG,EAAAqB,YAAW,I,mBAAX,EAAAA,eAEX,MAGJ,EAEA,eAoBW,WApBX,EAoBW,CAnBT,EAEA,eAIE,GAHAvB,MAAM,kB,WACG,EAAAwB,gB,qCAAA,EAAAA,gBAAe,GACxBb,KAAK,0C,uBAGP,eAIE,GAHAX,MAAM,kB,WACG,EAAAyB,Q,qCAAA,EAAAA,QAAO,GAChBd,KAAK,sC,uBAGP,eAIE,GAHAX,MAAM,e,WACG,EAAA0B,U,qCAAA,EAAAA,UAAS,GAClBf,KAAK,sF,yBAGT,EAEA,eASW,WATX,EASW,CART,EAEA,eAKE,GAJAX,MAAM,O,WACG,EAAA2B,a,qCAAA,EAAAA,aAAY,GACrBvB,YAAY,UACZO,KAAK,sI,yBAGT,EAEA,G,QAKN,eAEM,MAFN,EAEM,CADJ,eAA4B,GAAlBiB,OAAQ,EAAAA,QAAM,uBAI5B,eAIM,MAJN,EAIM,CAHJ,eAEM,MAFN,EAEM,CADJ,eAAwB,GAAjBC,QAAS,EAAAlB,MAAI,0B,4ECjFrB,SAASmB,GAAgB,MAAEC,EAAK,aAAEJ,IACvC,MAAMK,EAAcC,mBAAmBN,GAEvC,MAAO,GAAGI,eAAmBC,cAQxB,SAASE,GAAiB,MAAEH,EAAK,aAAEJ,IACxC,MAAMK,EAAcL,EAAaQ,QAAQ,KAAM,KAE/C,MAAO,GAAGJ,6BAAiCC,KAMtC,SAASI,GAAY,MAAEL,EAAK,aAAEJ,IACnC,MAAO,CACLU,QAASV,EACTW,YAAaR,EAAgB,CAAEC,QAAOJ,iBACtCY,WAAYL,EAAiB,CAAEH,QAAOJ,kBAUnC,SAASa,EAAYC,EAAYd,GACtC,MAAMI,EAAQU,EAAKV,QACbW,EAASN,EAAY,CAAEL,QAAOJ,iBAEpC,OAAO,eAAgBe,GC1CzB,MAAM/B,EAAO,kxBAWE,qBAAgB,CAC7BpB,KAAM,aACNqB,WAAY,CACV+B,WAAA,KACAC,OAAA,KACAC,UAAA,KACAC,YAAA,MAEF,OACE,MAAO,CACL1B,SAAU,gBACVC,SAAU,kBACVC,YAAa,MACbE,iBAAiB,EACjBC,SAAS,EACTC,WAAW,EACXC,aAAc,GACdC,OAAQ,iCACRL,YAAa,MACbZ,KAAMA,IAGVoC,QAAS,CACP,SACEC,QAAQC,MAAM,qCACdD,QAAQC,MAAM,CACZ7B,SAAUJ,KAAKI,SACfC,SAAUL,KAAKK,SACfC,YAAaN,KAAKM,YAClBE,gBAAiBR,KAAKQ,gBACtBD,YAAaP,KAAKO,YAClBE,QAAST,KAAKS,QACdE,aAAcX,KAAKW,eAGrB,MAAMc,EAAO,IAAIS,EAAA,KAAKlC,KAAKI,SAAUJ,KAAKK,SAAUL,KAAKM,aAEnD6B,EAAiBnC,KAAKW,aACxBa,EAAYC,EAAMzB,KAAKW,cACvB,GAEEyB,EAAeX,EAAKY,SAASrC,KAAKO,aACtC+B,EAAeb,EAAKa,cAAa,GAE7BC,EAAYd,EAAKe,KACrBC,EAAahB,EAAKiB,UAAU,SAC5BC,EAAalB,EAAKiB,UAAU,SAExBE,EAAc5C,KAAKU,UAAYe,EAAKiB,UAAU,UAAY,GAE1DG,EAAiB7C,KAAKQ,gBACxBiB,EAAKqB,uBACL,GAIEC,EAAgB/C,KAAKS,QAAUgB,EAAKuB,eAAiB,GAErDC,EAAiBxB,EAAKwB,iBAE5BjD,KAAKY,OAAS,uBAGlB2B,MACAE,MACAE,2BAIAR,MACAC,MACAE,MACAM,4DAMAC,QAEAE,kBAIAE,QCxGF,EAAOrE,OAASA,EAED,gB,2DCHRC,MAAM,e,EACT,eAAsB,UAAlB,iBAAa,G,EAGf,eAAgB,UAAZ,WAAO,G,EAQX,eAAa,UAAT,QAAI,G,4GAZZ,eAgBM,MAhBN,EAgBM,CAfJ,EAEA,eAMM,YALJ,EAIA,eAAuC,GAA5Ba,QAAS,EAAAkB,QAAM,sBAG5B,eAIM,YAHJ,EAEA,eAAuB,GAAhBtC,KAAM,EAAAsC,QAAM,qB,4BCVV,iBAAgB,CAC7BrC,KAAM,UACNqB,WAAY,CACVC,WAAA,KACAqD,OAAA,MAEF1E,MAAO,CACLoC,OAAQlC,UCVZ,EAAOE,OAASA,EAED,U,oCCDR,SAASuE,EAAkBjE,GAChC,OAAOA,EAAMiC,QAAQ,OAAQ,IAGxB,SAASiC,KAAWC,GACzB,MAAMnE,EAAQmE,EAAOC,KAAK,KAE1B,OAAOpE,EACJiC,QAAQ,aAAc,IACtBoC,cACApC,QAAQ,eAAgB,IACxBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,KAhBpB,qE,kFCCOtC,MAAM,a,EACT,eAAc,UAAV,SAAK,G,mFADX,eAKM,MALN,EAKM,CAJJ,EACA,eAEI,UADF,eAAwC,GAA7Ba,QAAS,EAAAmB,SAAO,wB,gBCAlB,iBAAgB,CAC7BtC,KAAM,OACNqB,WAAY,CACVC,WAAA,MAEFrB,MAAO,CACLqC,QAASnC,UCPb,EAAOE,OAASA,EAED","file":"js/chunk-add6459e.a98ef848.js","sourcesContent":["<template>\n  <pre><code>{{ code }}</code></pre>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  name: \"Code\",\n  props: {\n    code: { type: String, required: true },\n  },\n});\n</script>\n","\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  name: \"Code\",\n  props: {\n    code: { type: String, required: true },\n  },\n});\n","import { render } from \"./Code.vue?vue&type=template&id=15413d74\"\nimport script from \"./Code.vue?vue&type=script&lang=ts\"\nexport * from \"./Code.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./TextInput.vue?vue&type=style&index=0&id=de2a2f90&scoped=true&lang=css\"","<template>\n  <div>\n    <label :for=\"slug\">\n      {{ label }}<span v-if=\"isRequired\" class=\"required\">*</span>\n    </label>\n\n    <input\n      :id=\"slug\"\n      type=\"text\"\n      :value=\"modelValue\"\n      :placeholder=\"placeholder\"\n      :required=\"isRequired\"\n      :disabled=\"disabled\"\n      v-on:input=\"$emit('update:modelValue', $event.target.value)\"\n    />\n\n    <small class=\"note\" v-if=\"note\">\n      <Markdown :content=\"note\"></Markdown>\n    </small>\n  </div>\n</template>\n\n<style scoped>\nlabel {\n  padding-right: 0.5em;\n}\n</style>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport { slugify } from \"@/lib\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"TextInput\",\n  components: {\n    Markdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    modelValue: { type: String, required: true },\n    placeholder: { type: String, required: false },\n    isRequired: { type: Boolean, required: false },\n    disabled: { type: Boolean, required: false },\n    note: { type: String, required: false },\n  },\n  computed: {\n    slug(): string {\n      return slugify(\"text\", this.label, this.modelValue);\n    },\n  },\n});\n</script>\n","\nimport { defineComponent } from \"vue\";\n\nimport { slugify } from \"@/lib\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"TextInput\",\n  components: {\n    Markdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    modelValue: { type: String, required: true },\n    placeholder: { type: String, required: false },\n    isRequired: { type: Boolean, required: false },\n    disabled: { type: Boolean, required: false },\n    note: { type: String, required: false },\n  },\n  computed: {\n    slug(): string {\n      return slugify(\"text\", this.label, this.modelValue);\n    },\n  },\n});\n","import { render } from \"./TextInput.vue?vue&type=template&id=de2a2f90&scoped=true\"\nimport script from \"./TextInput.vue?vue&type=script&lang=ts\"\nexport * from \"./TextInput.vue?vue&type=script&lang=ts\"\n\nimport \"./TextInput.vue?vue&type=style&index=0&id=de2a2f90&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-de2a2f90\"\n\nexport default script","<template>\n  <div>\n    <label :for=\"slug\">\n      {{ label }}\n    </label>\n\n    <input\n      :id=\"slug\"\n      type=\"checkbox\"\n      :checked=\"modelValue\"\n      v-on:change=\"$emit('update:modelValue', $event.target.checked)\"\n    />\n\n    <small class=\"note\" v-if=\"note\">\n      <Markdown :content=\"note\"></Markdown>\n    </small>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport Markdown from \"@/components/Markdown.vue\";\nimport { slugify } from \"@/lib\";\n\nexport default defineComponent({\n  name: \"Checkbox\",\n  components: {\n    Markdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    modelValue: { type: Boolean, required: false },\n    note: { type: String, required: false },\n  },\n  computed: {\n    slug(): string {\n      return slugify(\"box\", this.label);\n    },\n  },\n});\n</script>\n","\nimport { defineComponent } from \"vue\";\n\nimport Markdown from \"@/components/Markdown.vue\";\nimport { slugify } from \"@/lib\";\n\nexport default defineComponent({\n  name: \"Checkbox\",\n  components: {\n    Markdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    modelValue: { type: Boolean, required: false },\n    note: { type: String, required: false },\n  },\n  computed: {\n    slug(): string {\n      return slugify(\"box\", this.label);\n    },\n  },\n});\n","import { render } from \"./Checkbox.vue?vue&type=template&id=5d484dba\"\nimport script from \"./Checkbox.vue?vue&type=script&lang=ts\"\nexport * from \"./Checkbox.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"badges container-lg\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <h1>Repo badges</h1>\n\n        <p>\n          Generate shields about your repo and add them to your README.md file.\n        </p>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-6\">\n        <div class=\"app-input\">\n          <h2>Input values</h2>\n\n          <form @submit.prevent.enter=\"submit\">\n            <fieldset name=\"gh-repo\">\n              <legend>GitHub repo</legend>\n\n              <TextInput label=\"Username\" v-model=\"username\" isRequired />\n              <br />\n\n              <TextInput label=\"Repo name\" v-model=\"repoName\" isRequired />\n              <br />\n\n              <TextInput label=\"License\" v-model=\"licenseType\" />\n              <br />\n\n              <div>\n                <label>Version type</label>\n                <input\n                  type=\"radio\"\n                  id=\"one\"\n                  value=\"tag\"\n                  v-model=\"versionType\"\n                />\n                <label for=\"one\">Tag</label>\n                <input\n                  type=\"radio\"\n                  id=\"two\"\n                  value=\"release\"\n                  v-model=\"versionType\"\n                />\n                <label for=\"two\">Release</label>\n              </div>\n            </fieldset>\n            <br />\n\n            <fieldset name=\"display-options\">\n              <legend>Display options</legend>\n\n              <Checkbox\n                label=\"Template button\"\n                v-model=\"useThisTemplate\"\n                note=\"Add a <i>Use This Template</i> button.\"\n              />\n\n              <Checkbox\n                label=\"GH Pages button\"\n                v-model=\"ghPages\"\n                note=\"Add a link to a GitHub Pages site.\"\n              />\n\n              <Checkbox\n                label=\"Issues badge\"\n                v-model=\"addIssues\"\n                note=\"Add a counter for number of open issues. The color will change based on the count.\"\n              />\n            </fieldset>\n            <br />\n\n            <fieldset name=\"gh-actions\">\n              <legend>GitHub Actions workflow</legend>\n\n              <TextInput\n                label=\"Name\"\n                v-model=\"workflowName\"\n                placeholder=\"Node CI\"\n                note='From the \"name\" field of a GH Actions workflow file. For badge-generator default repo, you can use \"GH Pages Deploy\" for a sample.'\n              />\n            </fieldset>\n            <br />\n\n            <input class=\"btn\" type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n      </div>\n\n      <div class=\"col-6\">\n        <Results :result=\"result\" />\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <Help :message=\"note\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport Help from \"@/components/Help.vue\";\nimport Checkbox from \"@/components/Checkbox.vue\";\nimport Results from \"@/components/Results.vue\";\nimport TextInput from \"@/components/TextInput.vue\";\n\nimport { Repo } from \"@/core/Repo\";\nimport { TagTypes } from \"@/core/Repo.d\";\nimport { statusBadge } from \"@/core/ghActions\";\n\nconst note = `\n- Where to put repo metadata badges.\n    - In your \\`README.md\\` file.\n- Where to put the social badges.\n    - On a docs site to link back to your repo.\n    - Link to a repo you don't own - such as if you want to link to the Vue repo and show its star count.\n- The first social badge has fixed display logic - so make sure you enter a valid repo as the badge can't tell you it is broken. A positive of this is that it works to point to private repos.\n- If you want to always how the latest tag, even if it has _no release_ yet, use the Tag badge. Otherwise, use the Release badge.\n- For centered badges - note that the HTML \\`align\\` attribute is being deprecated in favor of CSS. But in markdown on GitHub you cannot set CSS even inline and so must use the \\`align\\` attribute.\n`;\n\nexport default defineComponent({\n  name: \"RepoBadges\",\n  components: {\n    Checkbox,\n    Help,\n    Results,\n    TextInput,\n  },\n  data() {\n    return {\n      username: \"MichaelCurrin\",\n      repoName: \"badge-generator\",\n      licenseType: \"MIT\",\n      useThisTemplate: false,\n      ghPages: false,\n      addIssues: false,\n      workflowName: \"\",\n      result: \"_Your output will appear here_\",\n      versionType: \"tag\",\n      note: note,\n    };\n  },\n  methods: {\n    submit() {\n      console.debug(\"Process inputs and render results\");\n      console.debug({\n        username: this.username,\n        repoName: this.repoName,\n        licenseType: this.licenseType,\n        useThisTemplate: this.useThisTemplate,\n        versionType: this.versionType,\n        ghPages: this.ghPages,\n        workflowName: this.workflowName,\n      });\n\n      const repo = new Repo(this.username, this.repoName, this.licenseType);\n\n      const ghActionsBadge = this.workflowName\n        ? statusBadge(repo, this.workflowName)\n        : \"\";\n\n      const versionBadge = repo.tagBadge(this.versionType as TagTypes),\n        licenseBadge = repo.licenseBadge(true);\n\n      const repoBadge = repo.gh(),\n        starsBadge = repo.ghCounter(\"stars\"),\n        forksBadge = repo.ghCounter(\"forks\");\n\n      const issuesBadge = this.addIssues ? repo.ghCounter(\"issues\") : \"\";\n\n      const templateButton = this.useThisTemplate\n        ? repo.useThisTemplateBadge()\n        : \"\";\n      // For now just GH pages but can be extended to have badges focused on docs. A custom URL\n      // independent of repo can be generated in a separate section or maybe here - just add output\n      // URL and assume the other data.\n      const ghPagesButton = this.ghPages ? repo.ghPagesBadge() : \"\";\n\n      const licenseMessage = repo.licenseMessage();\n\n      this.result = `\\\n_Social buttons_\n\n${repoBadge}\n${starsBadge}\n${forksBadge}\n\n_Repo metadata_\n\n${ghActionsBadge}\n${versionBadge}\n${licenseBadge}\n${issuesBadge}\n\n_Call-to-Action buttons_\n\n<div align=\"center\">\n\n${templateButton}\n\n${ghPagesButton}\n\n</div>\n\n${licenseMessage}`;\n    },\n  },\n});\n</script>\n","/**\n * Generate a status badge around GH Actions.\n *\n * In GitHub on the Actions tab, go to a workflow run and under options on the right choose \"Create\n * status badge\". This is added to this generator project for convenience. Plus with a smart target\n * URL added.\n */\nimport { TGHWorkflow } from \"./ghActions.d\";\nimport { mdImageWithLink } from \"./markdown\";\nimport { Repo } from \"./Repo\";\n\n/**\n * Create URL for a GH Actions CI status badge.\n *\n * Note that \"+\" does not work in place of a space, so \"%20\" must be used.\n */\nexport function _statusBadgeUrl({ ghURL, workflowName }: TGHWorkflow) {\n  const encodedName = encodeURIComponent(workflowName);\n\n  return `${ghURL}/workflows/${encodedName}/badge.svg`;\n}\n\n/**\n * Create URL to view runs for a workflow name.\n *\n * Note that this URL does not need encoding - GitHub handles the unescaped colon and quotes fine.\n */\nexport function _statusTargetUrl({ ghURL, workflowName }: TGHWorkflow) {\n  const encodedName = workflowName.replace(/ /g, \"+\");\n\n  return `${ghURL}/actions?query=workflow:\"${encodedName}\"`;\n}\n\n/**\n * Return data needed to make a GH Actions CI badge.\n */\nexport function _statusData({ ghURL, workflowName }: TGHWorkflow) {\n  return {\n    altText: workflowName,\n    imageTarget: _statusBadgeUrl({ ghURL, workflowName }),\n    linkTarget: _statusTargetUrl({ ghURL, workflowName }),\n  };\n}\n\n/**\n * Return markdown text for a GH Actions status badge.\n *\n * Workflow names comes from the `name` value at the top of your YAML file. The actual filename is\n * irrelevant.\n */\nexport function statusBadge(repo: Repo, workflowName: string) {\n  const ghURL = repo.ghURL();\n  const fields = _statusData({ ghURL, workflowName });\n\n  return mdImageWithLink(fields);\n}\n","\nimport { defineComponent } from \"vue\";\n\nimport Help from \"@/components/Help.vue\";\nimport Checkbox from \"@/components/Checkbox.vue\";\nimport Results from \"@/components/Results.vue\";\nimport TextInput from \"@/components/TextInput.vue\";\n\nimport { Repo } from \"@/core/Repo\";\nimport { TagTypes } from \"@/core/Repo.d\";\nimport { statusBadge } from \"@/core/ghActions\";\n\nconst note = `\n- Where to put repo metadata badges.\n    - In your \\`README.md\\` file.\n- Where to put the social badges.\n    - On a docs site to link back to your repo.\n    - Link to a repo you don't own - such as if you want to link to the Vue repo and show its star count.\n- The first social badge has fixed display logic - so make sure you enter a valid repo as the badge can't tell you it is broken. A positive of this is that it works to point to private repos.\n- If you want to always how the latest tag, even if it has _no release_ yet, use the Tag badge. Otherwise, use the Release badge.\n- For centered badges - note that the HTML \\`align\\` attribute is being deprecated in favor of CSS. But in markdown on GitHub you cannot set CSS even inline and so must use the \\`align\\` attribute.\n`;\n\nexport default defineComponent({\n  name: \"RepoBadges\",\n  components: {\n    Checkbox,\n    Help,\n    Results,\n    TextInput,\n  },\n  data() {\n    return {\n      username: \"MichaelCurrin\",\n      repoName: \"badge-generator\",\n      licenseType: \"MIT\",\n      useThisTemplate: false,\n      ghPages: false,\n      addIssues: false,\n      workflowName: \"\",\n      result: \"_Your output will appear here_\",\n      versionType: \"tag\",\n      note: note,\n    };\n  },\n  methods: {\n    submit() {\n      console.debug(\"Process inputs and render results\");\n      console.debug({\n        username: this.username,\n        repoName: this.repoName,\n        licenseType: this.licenseType,\n        useThisTemplate: this.useThisTemplate,\n        versionType: this.versionType,\n        ghPages: this.ghPages,\n        workflowName: this.workflowName,\n      });\n\n      const repo = new Repo(this.username, this.repoName, this.licenseType);\n\n      const ghActionsBadge = this.workflowName\n        ? statusBadge(repo, this.workflowName)\n        : \"\";\n\n      const versionBadge = repo.tagBadge(this.versionType as TagTypes),\n        licenseBadge = repo.licenseBadge(true);\n\n      const repoBadge = repo.gh(),\n        starsBadge = repo.ghCounter(\"stars\"),\n        forksBadge = repo.ghCounter(\"forks\");\n\n      const issuesBadge = this.addIssues ? repo.ghCounter(\"issues\") : \"\";\n\n      const templateButton = this.useThisTemplate\n        ? repo.useThisTemplateBadge()\n        : \"\";\n      // For now just GH pages but can be extended to have badges focused on docs. A custom URL\n      // independent of repo can be generated in a separate section or maybe here - just add output\n      // URL and assume the other data.\n      const ghPagesButton = this.ghPages ? repo.ghPagesBadge() : \"\";\n\n      const licenseMessage = repo.licenseMessage();\n\n      this.result = `\\\n_Social buttons_\n\n${repoBadge}\n${starsBadge}\n${forksBadge}\n\n_Repo metadata_\n\n${ghActionsBadge}\n${versionBadge}\n${licenseBadge}\n${issuesBadge}\n\n_Call-to-Action buttons_\n\n<div align=\"center\">\n\n${templateButton}\n\n${ghPagesButton}\n\n</div>\n\n${licenseMessage}`;\n    },\n  },\n});\n","import { render } from \"./RepoBadges.vue?vue&type=template&id=5f5f5e7a\"\nimport script from \"./RepoBadges.vue?vue&type=script&lang=ts\"\nexport * from \"./RepoBadges.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <!-- Badge generator output pane -->\n  <div class=\"app-results\">\n    <h2>Output values</h2>\n\n    <div>\n      <h3>Preview</h3>\n      <!-- Make sure to not add result on a new line otherwise it will indent and format. -->\n      <!-- Make sure to use :source since {{ result }} as inner text will fail to update on UI\n        changes. -->\n      <Markdown :content=\"result\"></Markdown>\n    </div>\n\n    <div>\n      <h3>Code</h3>\n\n      <Code :code=\"result\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport Code from \"@/components/Code.vue\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"Results\",\n  components: {\n    Markdown,\n    Code,\n  },\n  props: {\n    result: String,\n  },\n});\n</script>\n","\nimport { defineComponent } from \"vue\";\n\nimport Code from \"@/components/Code.vue\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"Results\",\n  components: {\n    Markdown,\n    Code,\n  },\n  props: {\n    result: String,\n  },\n});\n","import { render } from \"./Results.vue?vue&type=template&id=4a98d89a\"\nimport script from \"./Results.vue?vue&type=script&lang=ts\"\nexport * from \"./Results.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","/**\n * Lib helper functions for Vue app.\n */\n\nexport function stripLeadingSlash(value: string) {\n  return value.replace(/^\\/+/, \"\");\n}\n\nexport function slugify(...values: string[]) {\n  const value = values.join(\"-\");\n\n  return value\n    .replace(/^\\s+|\\s+$/g, \"\") // Trim\n    .toLowerCase()\n    .replace(/[^a-z0-9 -]/g, \"\")\n    .replace(/\\s+/g, \"-\") // Collapse whitespace\n    .replace(/-+/g, \"-\"); // Collapse dashes\n}\n","<template>\n  <div class=\"app-notes\">\n    <h2>Notes</h2>\n    <p>\n      <Markdown :content=\"message\"></Markdown>\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"Help\",\n  components: {\n    Markdown,\n  },\n  props: {\n    message: String,\n  },\n});\n</script>\n","\nimport { defineComponent } from \"vue\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"Help\",\n  components: {\n    Markdown,\n  },\n  props: {\n    message: String,\n  },\n});\n","import { render } from \"./Help.vue?vue&type=template&id=167e31f7\"\nimport script from \"./Help.vue?vue&type=script&lang=ts\"\nexport * from \"./Help.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}