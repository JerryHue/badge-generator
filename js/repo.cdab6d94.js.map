{"version":3,"sources":["webpack:///./src/constants/text.ts","webpack:///./src/components/Code.vue","webpack:///./src/components/Code.vue?f6c3","webpack:///./src/components/Code.vue?e26e","webpack:///./src/components/TextInput.vue?6f20","webpack:///./src/components/TextInput.vue","webpack:///./src/components/TextInput.vue?b4e0","webpack:///./src/components/TextInput.vue?b18f","webpack:///./src/components/Checkbox.vue","webpack:///./src/components/Checkbox.vue?cf46","webpack:///./src/components/Checkbox.vue?2568","webpack:///./src/views/RepoBadges.vue","webpack:///./src/core/ghActions.ts","webpack:///./src/views/RepoBadges.vue?4ab5","webpack:///./src/views/RepoBadges.vue?60b2","webpack:///./src/components/Results.vue","webpack:///./src/components/Results.vue?649b","webpack:///./src/components/Results.vue?6f49","webpack:///./src/lib.ts","webpack:///./src/components/Results.vue?e96e","webpack:///./src/components/Help.vue","webpack:///./src/components/Help.vue?d82e","webpack:///./src/components/Help.vue?e1b3"],"names":["INITIAL_RESULT","label","asHtml","ref","class","outputCode","name","components","Checkbox","props","code","type","String","required","computed","this","htmlCode","methods","block","$refs","codeBlock","highlightElement","highlight","render","for","slug","id","value","modelValue","placeholder","isRequired","disabled","$emit","$event","target","content","note","Markdown","Boolean","__scopeId","checked","submit","username","repoName","licenseType","versionType","useThisTemplate","ghPages","addIssues","workflowName","result","message","_statusBadgeUrl","ghURL","encodedName","encodeURIComponent","_statusTargetUrl","replace","_statusData","altText","imageTarget","linkTarget","statusBadge","repo","fields","Help","Results","TextInput","console","debug","Repo","ghActionsBadge","versionBadge","tagBadge","licenseBadge","repoBadge","gh","starsBadge","ghCounter","forksBadge","issuesBadge","templateButton","useThisTemplateBadge","ghPagesButton","ghPagesBadge","licenseMessage","Code","stripLeadingSlash","slugify","values","join","toLowerCase"],"mappings":"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","file":"js/repo.cdab6d94.js","sourcesContent":["export const INITIAL_RESULT = \"_Your output will appear here_\";\n","// Render Markdown as a codeblock. Apply highlighting on content changes.\n<template>\n  <div>\n    <Checkbox label=\"Show HTML\" v-model=\"asHtml\" />\n    <br />\n\n    <pre><code ref=\"codeBlock\" class=\"markdown\">{{ outputCode }}</code></pre>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport hljs from \"highlight.js\";\nimport { defineComponent } from \"vue\";\n\nimport { cleanHtml, mdToHTML } from \"@/core/markdown\";\nimport Checkbox from \"./Checkbox.vue\";\n\nexport default defineComponent({\n  name: \"Code\",\n  components: {\n    Checkbox,\n  },\n  props: {\n    code: { type: String, required: true },\n  },\n  data() {\n    return {\n      asHtml: false,\n    };\n  },\n  computed: {\n    outputCode(): String {\n      if (this.asHtml) {\n        const htmlCode = mdToHTML(this.code);\n\n        return cleanHtml(htmlCode);\n      }\n      return this.code;\n    },\n  },\n  methods: {\n    highlight() {\n      const block = this.$refs.codeBlock as HTMLElement;\n      hljs.highlightElement(block);\n    },\n  },\n  mounted() {\n    this.highlight();\n  },\n  updated() {\n    this.highlight();\n  },\n});\n</script>\n","\nimport hljs from \"highlight.js\";\nimport { defineComponent } from \"vue\";\n\nimport { cleanHtml, mdToHTML } from \"@/core/markdown\";\nimport Checkbox from \"./Checkbox.vue\";\n\nexport default defineComponent({\n  name: \"Code\",\n  components: {\n    Checkbox,\n  },\n  props: {\n    code: { type: String, required: true },\n  },\n  data() {\n    return {\n      asHtml: false,\n    };\n  },\n  computed: {\n    outputCode(): String {\n      if (this.asHtml) {\n        const htmlCode = mdToHTML(this.code);\n\n        return cleanHtml(htmlCode);\n      }\n      return this.code;\n    },\n  },\n  methods: {\n    highlight() {\n      const block = this.$refs.codeBlock as HTMLElement;\n      hljs.highlightElement(block);\n    },\n  },\n  mounted() {\n    this.highlight();\n  },\n  updated() {\n    this.highlight();\n  },\n});\n","import { render } from \"./Code.vue?vue&type=template&id=457666df\"\nimport script from \"./Code.vue?vue&type=script&lang=ts\"\nexport * from \"./Code.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./TextInput.vue?vue&type=style&index=0&id=de2a2f90&scoped=true&lang=css\"","<template>\n  <div>\n    <label :for=\"slug\">\n      {{ label }}<span v-if=\"isRequired\" class=\"required\">*</span>\n    </label>\n\n    <input\n      :id=\"slug\"\n      type=\"text\"\n      :value=\"modelValue\"\n      :placeholder=\"placeholder\"\n      :required=\"isRequired\"\n      :disabled=\"disabled\"\n      v-on:input=\"$emit('update:modelValue', $event.target.value)\"\n    />\n\n    <small class=\"note\" v-if=\"note\">\n      <Markdown :content=\"note\"></Markdown>\n    </small>\n  </div>\n</template>\n\n<style scoped>\nlabel {\n  padding-right: 0.5em;\n}\n</style>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport { slugify } from \"@/lib\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"TextInput\",\n  components: {\n    Markdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    modelValue: { type: String, required: true },\n    placeholder: { type: String, required: false },\n    isRequired: { type: Boolean, required: false },\n    disabled: { type: Boolean, required: false },\n    note: { type: String, required: false },\n  },\n  computed: {\n    slug(): string {\n      return slugify(\"text\", this.label, this.modelValue);\n    },\n  },\n});\n</script>\n","\nimport { defineComponent } from \"vue\";\n\nimport { slugify } from \"@/lib\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"TextInput\",\n  components: {\n    Markdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    modelValue: { type: String, required: true },\n    placeholder: { type: String, required: false },\n    isRequired: { type: Boolean, required: false },\n    disabled: { type: Boolean, required: false },\n    note: { type: String, required: false },\n  },\n  computed: {\n    slug(): string {\n      return slugify(\"text\", this.label, this.modelValue);\n    },\n  },\n});\n","import { render } from \"./TextInput.vue?vue&type=template&id=de2a2f90&scoped=true\"\nimport script from \"./TextInput.vue?vue&type=script&lang=ts\"\nexport * from \"./TextInput.vue?vue&type=script&lang=ts\"\n\nimport \"./TextInput.vue?vue&type=style&index=0&id=de2a2f90&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-de2a2f90\"\n\nexport default script","<template>\n  <div>\n    <label :for=\"slug\">\n      {{ label }}\n    </label>\n\n    <input\n      :id=\"slug\"\n      type=\"checkbox\"\n      :checked=\"modelValue\"\n      v-on:change=\"$emit('update:modelValue', $event.target.checked)\"\n    />\n\n    <small class=\"note\" v-if=\"note\">\n      <Markdown :content=\"note\"></Markdown>\n    </small>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport Markdown from \"@/components/Markdown.vue\";\nimport { slugify } from \"@/lib\";\n\nexport default defineComponent({\n  name: \"Checkbox\",\n  components: {\n    Markdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    modelValue: { type: Boolean, required: false },\n    note: { type: String, required: false },\n  },\n  computed: {\n    slug(): string {\n      return slugify(\"box\", this.label);\n    },\n  },\n});\n</script>\n","\nimport { defineComponent } from \"vue\";\n\nimport Markdown from \"@/components/Markdown.vue\";\nimport { slugify } from \"@/lib\";\n\nexport default defineComponent({\n  name: \"Checkbox\",\n  components: {\n    Markdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    modelValue: { type: Boolean, required: false },\n    note: { type: String, required: false },\n  },\n  computed: {\n    slug(): string {\n      return slugify(\"box\", this.label);\n    },\n  },\n});\n","import { render } from \"./Checkbox.vue?vue&type=template&id=5d484dba\"\nimport script from \"./Checkbox.vue?vue&type=script&lang=ts\"\nexport * from \"./Checkbox.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"badges container-lg\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <h1>Repo badges</h1>\n\n        <p>\n          Generate shields about your repo and add them to your README.md file.\n        </p>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-6\">\n        <div class=\"app-input\">\n          <h2>Input values</h2>\n\n          <form @submit.prevent.enter=\"submit\">\n            <fieldset name=\"gh-repo\">\n              <legend>GitHub repo</legend>\n\n              <TextInput label=\"Username\" v-model=\"username\" isRequired />\n              <br />\n\n              <TextInput label=\"Repo name\" v-model=\"repoName\" isRequired />\n              <br />\n\n              <TextInput label=\"License\" v-model=\"licenseType\" />\n              <br />\n\n              <div>\n                <label>Version type</label>\n                <input\n                  type=\"radio\"\n                  id=\"one\"\n                  value=\"tag\"\n                  v-model=\"versionType\"\n                />\n                <label for=\"one\">Tag</label>\n                <input\n                  type=\"radio\"\n                  id=\"two\"\n                  value=\"release\"\n                  v-model=\"versionType\"\n                />\n                <label for=\"two\">Release</label>\n              </div>\n            </fieldset>\n            <br />\n\n            <fieldset name=\"display-options\">\n              <legend>Display options</legend>\n\n              <Checkbox\n                label=\"Template button\"\n                v-model=\"useThisTemplate\"\n                note=\"Add a <i>Use This Template</i> button.\"\n              />\n\n              <Checkbox\n                label=\"GH Pages button\"\n                v-model=\"ghPages\"\n                note=\"Add a link to a GitHub Pages site.\"\n              />\n\n              <Checkbox\n                label=\"Issues badge\"\n                v-model=\"addIssues\"\n                note=\"Add a counter for number of open issues. The color will change based on the count.\"\n              />\n            </fieldset>\n            <br />\n\n            <fieldset name=\"gh-actions\">\n              <legend>GitHub Actions workflow</legend>\n\n              <TextInput\n                label=\"Name\"\n                v-model=\"workflowName\"\n                placeholder=\"Node CI\"\n                note='From the \"name\" field of a GH Actions workflow file. For badge-generator default repo, you can use \"GH Pages Deploy\" for a sample.'\n              />\n            </fieldset>\n            <br />\n\n            <input class=\"btn\" type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n      </div>\n\n      <div class=\"col-6\">\n        <Results :result=\"result\" />\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <Help :message=\"note\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport { INITIAL_RESULT } from \"@/constants/text\";\n\nimport Help from \"@/components/Help.vue\";\nimport Checkbox from \"@/components/Checkbox.vue\";\nimport Results from \"@/components/Results.vue\";\nimport TextInput from \"@/components/TextInput.vue\";\n\nimport { Repo } from \"@/core/Repo\";\nimport { TagTypes } from \"@/core/Repo.d\";\nimport { statusBadge } from \"@/core/ghActions\";\n\nconst note = `\n- Where to put repo metadata badges.\n    - In your \\`README.md\\` file.\n- Where to put the social badges.\n    - On a docs site to link back to your repo.\n    - Link to a repo you don't own - such as if you want to link to the Vue repo and show its star count.\n- The first social badge has fixed display logic - so make sure you enter a valid repo as the badge can't tell you it is broken. A positive of this is that it works to point to private repos.\n- If you want to always how the latest tag, even if it has _no release_ yet, use the Tag badge. Otherwise, use the Release badge.\n- For centered badges - note that the HTML \\`align\\` attribute is being deprecated in favor of CSS. But in markdown on GitHub you cannot set CSS even inline and so must use the \\`align\\` attribute.\n`;\n\nexport default defineComponent({\n  name: \"RepoBadges\",\n  components: {\n    Checkbox,\n    Help,\n    Results,\n    TextInput,\n  },\n  data() {\n    return {\n      username: \"MichaelCurrin\",\n      repoName: \"badge-generator\",\n      licenseType: \"MIT\",\n\n      useThisTemplate: false,\n      ghPages: false,\n      addIssues: false,\n      workflowName: \"\",\n      versionType: \"tag\",\n\n      result: INITIAL_RESULT,\n      note: note,\n    };\n  },\n  methods: {\n    submit() {\n      console.debug(\"Process inputs and render results\");\n      console.debug({\n        username: this.username,\n        repoName: this.repoName,\n        licenseType: this.licenseType,\n        useThisTemplate: this.useThisTemplate,\n        versionType: this.versionType,\n        ghPages: this.ghPages,\n        workflowName: this.workflowName,\n      });\n\n      const repo = new Repo(this.username, this.repoName, this.licenseType);\n\n      const ghActionsBadge = this.workflowName\n        ? statusBadge(repo, this.workflowName)\n        : \"\";\n\n      const versionBadge = repo.tagBadge(this.versionType as TagTypes),\n        licenseBadge = repo.licenseBadge(true);\n\n      const repoBadge = repo.gh(),\n        starsBadge = repo.ghCounter(\"stars\"),\n        forksBadge = repo.ghCounter(\"forks\");\n\n      const issuesBadge = this.addIssues ? repo.ghCounter(\"issues\") : \"\";\n\n      const templateButton = this.useThisTemplate\n        ? repo.useThisTemplateBadge()\n        : \"\";\n      // For now just GH pages but can be extended to have badges focused on docs. A custom URL\n      // independent of repo can be generated in a separate section or maybe here - just add output\n      // URL and assume the other data.\n      const ghPagesButton = this.ghPages ? repo.ghPagesBadge() : \"\";\n\n      const licenseMessage = repo.licenseMessage();\n\n      this.result = `\\\n_Social buttons_\n\n${repoBadge}\n${starsBadge}\n${forksBadge}\n\n_Repo metadata_\n\n${ghActionsBadge}\n${versionBadge}\n${licenseBadge}\n${issuesBadge}\n\n_Call-to-Action buttons_\n\n<div align=\"center\">\n\n${templateButton}\n\n${ghPagesButton}\n\n</div>\n\n${licenseMessage}`;\n    },\n  },\n});\n</script>\n","/**\n * Generate a status badge around GH Actions.\n *\n * In GitHub on the Actions tab, go to a workflow run and under options on the right choose \"Create\n * status badge\". This is added to this generator project for convenience. Plus with a smart target\n * URL added.\n */\nimport { TGHWorkflow } from \"./ghActions.d\";\nimport { mdImageWithLink } from \"./markdown\";\nimport { Repo } from \"./Repo\";\n\n/**\n * Create URL for a GH Actions CI status badge.\n *\n * Note that \"+\" does not work in place of a space, so \"%20\" must be used.\n */\nexport function _statusBadgeUrl({ ghURL, workflowName }: TGHWorkflow) {\n  const encodedName = encodeURIComponent(workflowName);\n\n  return `${ghURL}/workflows/${encodedName}/badge.svg`;\n}\n\n/**\n * Create URL to view runs for a workflow name.\n *\n * Note that this URL does not need encoding - GitHub handles the unescaped colon and quotes fine.\n */\nexport function _statusTargetUrl({ ghURL, workflowName }: TGHWorkflow) {\n  const encodedName = workflowName.replace(/ /g, \"+\");\n\n  return `${ghURL}/actions?query=workflow:\"${encodedName}\"`;\n}\n\n/**\n * Return data needed to make a GH Actions CI badge.\n */\nexport function _statusData({ ghURL, workflowName }: TGHWorkflow) {\n  return {\n    altText: workflowName,\n    imageTarget: _statusBadgeUrl({ ghURL, workflowName }),\n    linkTarget: _statusTargetUrl({ ghURL, workflowName }),\n  };\n}\n\n/**\n * Return markdown text for a GH Actions status badge.\n *\n * Workflow names comes from the `name` value at the top of your YAML file. The actual filename is\n * irrelevant.\n */\nexport function statusBadge(repo: Repo, workflowName: string) {\n  const ghURL = repo.ghURL();\n  const fields = _statusData({ ghURL, workflowName });\n\n  return mdImageWithLink(fields);\n}\n","\nimport { defineComponent } from \"vue\";\n\nimport { INITIAL_RESULT } from \"@/constants/text\";\n\nimport Help from \"@/components/Help.vue\";\nimport Checkbox from \"@/components/Checkbox.vue\";\nimport Results from \"@/components/Results.vue\";\nimport TextInput from \"@/components/TextInput.vue\";\n\nimport { Repo } from \"@/core/Repo\";\nimport { TagTypes } from \"@/core/Repo.d\";\nimport { statusBadge } from \"@/core/ghActions\";\n\nconst note = `\n- Where to put repo metadata badges.\n    - In your \\`README.md\\` file.\n- Where to put the social badges.\n    - On a docs site to link back to your repo.\n    - Link to a repo you don't own - such as if you want to link to the Vue repo and show its star count.\n- The first social badge has fixed display logic - so make sure you enter a valid repo as the badge can't tell you it is broken. A positive of this is that it works to point to private repos.\n- If you want to always how the latest tag, even if it has _no release_ yet, use the Tag badge. Otherwise, use the Release badge.\n- For centered badges - note that the HTML \\`align\\` attribute is being deprecated in favor of CSS. But in markdown on GitHub you cannot set CSS even inline and so must use the \\`align\\` attribute.\n`;\n\nexport default defineComponent({\n  name: \"RepoBadges\",\n  components: {\n    Checkbox,\n    Help,\n    Results,\n    TextInput,\n  },\n  data() {\n    return {\n      username: \"MichaelCurrin\",\n      repoName: \"badge-generator\",\n      licenseType: \"MIT\",\n\n      useThisTemplate: false,\n      ghPages: false,\n      addIssues: false,\n      workflowName: \"\",\n      versionType: \"tag\",\n\n      result: INITIAL_RESULT,\n      note: note,\n    };\n  },\n  methods: {\n    submit() {\n      console.debug(\"Process inputs and render results\");\n      console.debug({\n        username: this.username,\n        repoName: this.repoName,\n        licenseType: this.licenseType,\n        useThisTemplate: this.useThisTemplate,\n        versionType: this.versionType,\n        ghPages: this.ghPages,\n        workflowName: this.workflowName,\n      });\n\n      const repo = new Repo(this.username, this.repoName, this.licenseType);\n\n      const ghActionsBadge = this.workflowName\n        ? statusBadge(repo, this.workflowName)\n        : \"\";\n\n      const versionBadge = repo.tagBadge(this.versionType as TagTypes),\n        licenseBadge = repo.licenseBadge(true);\n\n      const repoBadge = repo.gh(),\n        starsBadge = repo.ghCounter(\"stars\"),\n        forksBadge = repo.ghCounter(\"forks\");\n\n      const issuesBadge = this.addIssues ? repo.ghCounter(\"issues\") : \"\";\n\n      const templateButton = this.useThisTemplate\n        ? repo.useThisTemplateBadge()\n        : \"\";\n      // For now just GH pages but can be extended to have badges focused on docs. A custom URL\n      // independent of repo can be generated in a separate section or maybe here - just add output\n      // URL and assume the other data.\n      const ghPagesButton = this.ghPages ? repo.ghPagesBadge() : \"\";\n\n      const licenseMessage = repo.licenseMessage();\n\n      this.result = `\\\n_Social buttons_\n\n${repoBadge}\n${starsBadge}\n${forksBadge}\n\n_Repo metadata_\n\n${ghActionsBadge}\n${versionBadge}\n${licenseBadge}\n${issuesBadge}\n\n_Call-to-Action buttons_\n\n<div align=\"center\">\n\n${templateButton}\n\n${ghPagesButton}\n\n</div>\n\n${licenseMessage}`;\n    },\n  },\n});\n","import { render } from \"./RepoBadges.vue?vue&type=template&id=21cdcc39\"\nimport script from \"./RepoBadges.vue?vue&type=script&lang=ts\"\nexport * from \"./RepoBadges.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <!-- Badge Generator output pane -->\n  <div class=\"app-results\">\n    <h2>Output values</h2>\n\n    <div>\n      <h3>Preview</h3>\n\n      <Markdown class=\"markdown-preview\" :content=\"result\"></Markdown>\n    </div>\n\n    <br />\n\n    <div>\n      <h3>Code</h3>\n\n      <Code :code=\"result\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nimport Code from \"@/components/Code.vue\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"Results\",\n  components: {\n    Markdown,\n    Code,\n  },\n  props: {\n    result: { type: String, required: true },\n  },\n});\n</script>\n\n<style scoped>\n.markdown-preview {\n  padding-left: 12px;\n}\n</style>\n","\nimport { defineComponent } from \"vue\";\n\nimport Code from \"@/components/Code.vue\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"Results\",\n  components: {\n    Markdown,\n    Code,\n  },\n  props: {\n    result: { type: String, required: true },\n  },\n});\n","import { render } from \"./Results.vue?vue&type=template&id=58367787&scoped=true\"\nimport script from \"./Results.vue?vue&type=script&lang=ts\"\nexport * from \"./Results.vue?vue&type=script&lang=ts\"\n\nimport \"./Results.vue?vue&type=style&index=0&id=58367787&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-58367787\"\n\nexport default script","/**\n * Lib helper functions for Vue app.\n */\n\nexport function stripLeadingSlash(value: string) {\n  return value.replace(/^\\/+/, \"\");\n}\n\nexport function slugify(...values: string[]) {\n  const value = values.join(\"-\");\n\n  return value\n    .replace(/^\\s+|\\s+$/g, \"\") // Trim\n    .toLowerCase()\n    .replace(/[^a-z0-9 -]/g, \"\")\n    .replace(/\\s+/g, \"-\") // Collapse whitespace\n    .replace(/-+/g, \"-\"); // Collapse dashes\n}\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Results.vue?vue&type=style&index=0&id=58367787&scoped=true&lang=css\"","<template>\n  <div class=\"app-notes\">\n    <h2>Notes</h2>\n    <p>\n      <Markdown :content=\"message\"></Markdown>\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"Help\",\n  components: {\n    Markdown,\n  },\n  props: {\n    message: { type: String, required: true },\n  },\n});\n</script>\n","\nimport { defineComponent } from \"vue\";\nimport Markdown from \"@/components/Markdown.vue\";\n\nexport default defineComponent({\n  name: \"Help\",\n  components: {\n    Markdown,\n  },\n  props: {\n    message: { type: String, required: true },\n  },\n});\n","import { render } from \"./Help.vue?vue&type=template&id=0031e5e4\"\nimport script from \"./Help.vue?vue&type=script&lang=ts\"\nexport * from \"./Help.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}